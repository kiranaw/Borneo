import _file_.model._

def dailyTravelDistanceAvg(d: Seq[Array[Double]]) = math.abs(d.map(_(0)).median - 769)
def dailyTravelDistanceStd(d: Seq[Array[Double]]) = d.map(_(0)).meanSquaredError

//def totalEnergyIntakeAvg(d: Seq[Array[Double]]) = math.abs(d.map(_(1)).average - 3015)
//def totalEnergyExpenditureAvg(d: Seq[Array[Double]]) = math.abs(d.map(_(2)).average - 1476)

val resultLine = Val[Array[Double]]

val tupleTask = ScalaTask("""
  val resultLine = 
    Array(travelDistance, totalEnergyIntake, energyExpenditure) 
""") set (
  (inputs, outputs) += (travelDistance, totalEnergyIntake, energyExpenditure), 
  outputs += (resultLine)
)

NSGA2Evolution(
  evaluation = model -- tupleTask,
  genome = Seq(
    bodyWeight in (30.0 to 45.0),
    energyIntake in (2.0 to 10.0),
    energyGain in (200.0 to 400.0),
    initialSatiation in (-500.0 to 500.0),
    basalEnergy in (1.0 to 1.5),
    brachiationSpeed in (0.5 to 2.0),
    swaySpeed in (0.5 to 2.0),
    climbSpeed in (0.5 to 2.0),
    descentSpeed in (0.5 to 2.0),
    walkSpeed in (0.5 to 1.0)
  ),
  objective = Seq(
    resultLine aggregate (dailyTravelDistanceAvg _) as "travelDistance",
    resultLine aggregate (dailyTravelDistanceStd _) as "travelDistanceStd"
  ),
  parallelism = 500,
  termination = 500000,
  stochastic = Stochastic(seed = seed),
  distribution = Island(5 minutes)
) hook (workDirectory / "result-std", filter = Seq(resultLine), frequency = 100) on env