import _file_.model._


def dailyTravelDistancePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 769, sigma = 19).getOrElse(1.0) 
def totalEnergyExpenditurePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 1476, sigma = 268).getOrElse(1.0) 
def totalEnergyIntakePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 3015, sigma = 40.8).getOrElse(1.0) 

def energyPValue(d: Seq[Array[Double]]) =
 Seq(
   dailyTravelDistancePValue(d.map(_(5))),
   totalEnergyExpenditurePValue(d.map(_(10))),
   totalEnergyIntakePValue(d.map(_(9)))
 ).max

def frequencyOfSwayPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 19.0, sigma = 1.0).getOrElse(1.0)  
def frequencyOfBrachiatePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 47.9, sigma = 1.0).getOrElse(1.0)
def frequencyOfWalkPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 11.7, sigma = 1.0).getOrElse(1.0)
def frequencyOfClimbPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 9.8, sigma = 1.0).getOrElse(1.0)
def frequencyOfDescentPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 5.2, sigma = 1.0).getOrElse(1.0)

def frequencyOfMovePValue(d: Seq[Array[Double]]) =
  Seq(
    frequencyOfSwayPValue(d.map(_(1))),
    frequencyOfBrachiatePValue(d.map(_(2))),
    frequencyOfWalkPValue(d.map(_(0))),
    frequencyOfClimbPValue(d.map(_(3))),
    frequencyOfDescentPValue(d.map(_(4))),
  ).max

def feedingBudgetFitness(d: Seq[Double]) = ksTest(d, Seq(50.6, 61.9)).getOrElse(1.0) 
def travelingBudgetFitness(d: Seq[Double]) = ksTest(d, Seq(17.6, 16.6)).getOrElse(1.0) 
def restingBudgetFitness(d: Seq[Double]) = ksTest(d, Seq(18.2, 31.3)).getOrElse(1.0) 

def budgetPValue(d: Seq[Array[Double]]) =
  Seq(
    feedingBudgetFitness(d.map(_(6))),
    travelingBudgetFitness(d.map(_(7))),
    restingBudgetFitness(d.map(_(8)))
  ).max

val resultLine = Val[Array[Double]]

val tupleTask = ScalaTask("""
  val resultLine = 
    Array(walk, sway, brachiation, climb, descent, travelDistance, feedingBudget, travellingBudget, restingBudget, totalEnergyIntake, energyExpenditure) 
""") set (
  inputs += (walk, sway, brachiation, climb, descent, travelDistance, feedingBudget, travellingBudget, restingBudget, totalEnergyIntake, energyExpenditure), 
  outputs += (resultLine)
)


NSGA2Evolution(
  evaluation = model -- tupleTask,
  genome = Seq(
    bodyWeight in (30.0 to 45.0),
    energyIntake in (2.0 to 10.0),
    energyGain in (200.0 to 400.0),
    initialSatiation in (-500.0 to 500.0),
    basalEnergy in (1.0 to 1.5),
    brachiationSpeed in (0.5 to 2.0),
    swaySpeed in (0.5 to 2.0),
    climbSpeed in (0.5 to 2.0),
    descentSpeed in (0.5 to 2.0),
    walkSpeed in (0.5 to 1.0)
  ),
  objective = Seq(
    resultLine aggregate (energyPValue _) as "energyPValue",
    resultLine aggregate (frequencyOfMovePValue _) as "frequencyOfMovePValue",
    resultLine aggregate (budgetPValue _) as "budgetPValue"
  ),
  termination = 1000,
  stochastic = Stochastic(seed = seed)
) hook (workDirectory / "result")