import _file_.model._

// def dailyTravelDistancePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 769, sigma = 19).getOrElse(1.0) 
// def totalEnergyExpenditurePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 1476, sigma = 268).getOrElse(1.0) 
// def totalEnergyIntakePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 3015, sigma = 40.8).getOrElse(1.0) 

def dailyTravelDistanceAvg(d: Seq[Double]) = math.abs(d.average - 769)
def totalEnergyExpenditureAvg(d: Seq[Double]) = math.abs(d.average - 1476)
def totalEnergyIntakeAvg(d: Seq[Double]) = math.abs(d.average - 3015)

// def energyPValue(d: Seq[Array[Double]]) =
//  Seq(
//   dailyTravelDistancePValu(d.map(_(5))),
//   totalEnergyExpenditurePValue(d.map(_(10))),
//   totalEnergyIntakePValue(d.map(_(9)))
//  ).max
 
def energyAvg(d: Seq[Array[Double]]) =
 Seq(
   dailyTravelDistanceAvg(d.map(_(5))),
   totalEnergyExpenditureAvg(d.map(_(10))),
   totalEnergyIntakeAvg(d.map(_(9)))
 ).sum / 3

// def frequencyOfSwayPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 19.0, sigma = 1.0).getOrElse(1.0)  
// def frequencyOfBrachiatePValue(d: Seq[Double]) = ksTestGaussian(d, mu = 47.9, sigma = 1.0).getOrElse(1.0)
// def frequencyOfWalkPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 11.7, sigma = 1.0).getOrElse(1.0)
// def frequencyOfClimbPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 9.8, sigma = 1.0).getOrElse(1.0)
// def frequencyOfDescentPValue(d: Seq[Double]) = ksTestGaussian(d, mu = 5.2, sigma = 1.0).getOrElse(1.0)

// def frequencyOfMovePValue(d: Seq[Array[Double]]) =
//   Seq(
//     frequencyOfSwayPValue(d.map(_(1))),
//     frequencyOfBrachiatePValue(d.map(_(2))),
//     frequencyOfWalkPValue(d.map(_(0))),
//     frequencyOfClimbPValue(d.map(_(3))),
//     frequencyOfDescentPValue(d.map(_(4))),
//   ).max


def frequencyOfSwayAvg(d: Seq[Double]) = math.abs(d.average - 19.0)  
def frequencyOfBrachiateAvg(d: Seq[Double]) = math.abs(d.average - 47.9)
def frequencyOfWalkAvg(d: Seq[Double]) = math.abs(d.average - 11.7)
def frequencyOfClimbAvg(d: Seq[Double]) = math.abs(d.average - 9.8)
def frequencyOfDescentAvg(d: Seq[Double]) = math.abs(d.average - 5.2)

def frequencyOfMoveAvg(d: Seq[Array[Double]]) =
  Seq(
    frequencyOfSwayAvg(d.map(_(1))),
    frequencyOfBrachiateAvg(d.map(_(2))),
    frequencyOfWalkAvg(d.map(_(0))),
    frequencyOfClimbAvg(d.map(_(3))),
    frequencyOfDescentAvg(d.map(_(4))),
  ).sum / 5



// def distToBounds(v: Double, min: Double, max: Double) = if(v < min) min - v else math.max(0, v - max) 
// def feedingBudgetFitness(d: Seq[Double]) = d.map(v => distToBounds(v, 50.6, 61.9)).sum / d.size  //ksTest(d, Seq(50.6, 61.9)).getOrElse(1.0) 
// def travelingBudgetFitness(d: Seq[Double]) = d.map(v => distToBounds(v, 16.6, 17.6)).sum / d.size //ksTest(d, Seq(17.6, 16.6)).getOrElse(1.0) 
// def restingBudgetFitness(d: Seq[Double]) = d.map(v => distToBounds(v, 18.2, 31.3)).sum / d.size //ksTest(d, Seq(18.2, 31.3)).getOrElse(1.0) 

def feedingBudgetFitness(d: Seq[Double]) = math.abs(d.average - 50.6)
def travelingBudgetFitness(d: Seq[Double]) = math.abs(d.average - 16.6)
def restingBudgetFitness(d: Seq[Double]) = math.abs(d.average - 31.3)


def budgetDelta(d: Seq[Array[Double]]) =
  Seq(
    feedingBudgetFitness(d.map(_(6))),
    travelingBudgetFitness(d.map(_(7))),
    restingBudgetFitness(d.map(_(8)))
  ).sum / 3

val resultLine = Val[Array[Double]]

val tupleTask = ScalaTask("""
  val resultLine = 
    Array(walk, sway, brachiation, climb, descent, travelDistance, feedingBudget, travellingBudget, restingBudget, totalEnergyIntake, energyExpenditure) 
""") set (
  (inputs, outputs) += (walk, sway, brachiation, climb, descent, travelDistance, feedingBudget, travellingBudget, restingBudget, totalEnergyIntake, energyExpenditure), 
  outputs += (resultLine)
)

val env =
  SLURMEnvironment(
    "widyastu",
    "taurus.hrsk.tu-dresden.de",
    //wallTime = 1 hour,
    memory = 2100 megabytes,
    openMOLEMemory = 1500 megabytes,
    reservation = "p_peatfire_386",
    nodes = 1,
    threads = 2,
    workDirectory = "/tmp"
  )


NSGA2Evolution(
  evaluation = model -- tupleTask,
  genome = Seq(
    bodyWeight in (30.0 to 45.0),
    energyIntake in (2.0 to 10.0),
    energyGain in (200.0 to 400.0),
    initialSatiation in (-500.0 to 500.0),
    basalEnergy in (1.0 to 1.5),
    brachiationSpeed in (0.5 to 2.0),
    swaySpeed in (0.5 to 2.0),
    climbSpeed in (0.5 to 2.0),
    descentSpeed in (0.5 to 2.0),
    walkSpeed in (0.5 to 1.0)
  ),
  objective = Seq(
    resultLine aggregate (energyAvg _) as "energyAvg",
    resultLine aggregate (frequencyOfMoveAvg _) as "frequencyOfMoveAvg",
    resultLine aggregate (budgetDelta _) as "budgetAvg"
  ),
  parallelism = 10000,
  termination = 1000000,
  stochastic = Stochastic(seed = seed),
  distribution = Island(5 minutes)
) hook (workDirectory / "results", filter = Seq(resultLine), frequency = 100) on env