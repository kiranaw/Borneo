import _file_.model_sab._

def outside(v: Seq[Double], min: Double, max: Double) = v.count(v => v < min | v > max).toDouble / v.size
def outsideP(v: Seq[Double], target: Double, p: Double = 0.5) = outside(v, target - (target * p), target + (target * p))
def outsideD(v: Seq[Double], target: Double, d: Double = 10.0) =  outside(v, target - d, target + d)

def feedingBudgetFit(d: Seq[Double]) = outsideD(d, 61.9)
def travelingBudgetFit(d: Seq[Double]) = outsideD(d, 17.6)
def restingBudgetFit(d: Seq[Double]) = outsideD(d, 18.2)

def feedingBudgetF(d: Seq[Array[Double]]) = feedingBudgetFit(d.map(_(6)))
def travelingBudgetF(d: Seq[Array[Double]]) = travelingBudgetFit(d.map(_(7)))
def restingBudgetF(d: Seq[Array[Double]]) = restingBudgetFit(d.map(_(8)))

def budgetFit(d: Seq[Array[Double]]) =
  Seq(
    feedingBudgetFit(d.map(_(6))),
    travelingBudgetFit(d.map(_(7))),
    restingBudgetFit(d.map(_(8)))
  ).average
  
def dailyTravelDistanceFit(v: Seq[Double]) = outsideP(v, 769)
def totalEnergyExpenditureFit(v: Seq[Double]) = outsideP(v, 1476)
def totalEnergyIntakeFit(v: Seq[Double]) = outsideP(v, 3015)  

def travelDistFit(d: Seq[Array[Double]]) = dailyTravelDistanceFit(d.map(_(5)))
def energyExpenditureFit(d: Seq[Array[Double]]) = totalEnergyExpenditureFit(d.map(_(10)))
def energyIntakeFit(d: Seq[Array[Double]]) = totalEnergyIntakeFit(d.map(_(9)))

def energyFit(d: Seq[Array[Double]]) =
  Seq(
   dailyTravelDistanceFit(d.map(_(5))),
   totalEnergyExpenditureFit(d.map(_(10))),
   totalEnergyIntakeFit(d.map(_(9)))
  ).average

def frequencyOfSwayFit(d: Seq[Double]) = outsideP(d, 20.2)  
def frequencyOfBrachiateFit(d: Seq[Double]) = outsideP(d, 51.2)
def frequencyOfWalkFit(d: Seq[Double]) = outsideP(d, 12.5)
def frequencyOfClimbFit(d: Seq[Double]) = outsideP(d,10.5)
def frequencyOfDescentFit(d: Seq[Double]) = outsideP(d, 5.5)

def frequencyOfMoveFit(d: Seq[Array[Double]]) =
  Seq(
    frequencyOfSwayFit(d.map(_(1))),
    frequencyOfBrachiateFit(d.map(_(2))),
    frequencyOfWalkFit(d.map(_(0))),
    frequencyOfClimbFit(d.map(_(3))),
    frequencyOfDescentFit(d.map(_(4))),
  ).average
  
def aggregatedFitness(d: Seq[Array[Double]]) =
  Seq(
    frequencyOfSwayFit(d.map(_(1))),
    frequencyOfBrachiateFit(d.map(_(2))),
    frequencyOfWalkFit(d.map(_(0))),
    frequencyOfClimbFit(d.map(_(3))),
    frequencyOfDescentFit(d.map(_(4))),
    dailyTravelDistanceFit(d.map(_(5))),
    totalEnergyExpenditureFit(d.map(_(10))),
    totalEnergyIntakeFit(d.map(_(9))),
    feedingBudgetFit(d.map(_(6))),
    travelingBudgetFit(d.map(_(7))),
    restingBudgetFit(d.map(_(8)))
  ).average

val replicate = 
  Replication(
    evaluation = model, 
    seed = seed, 
    sample = 10,
    aggregation = Seq(
      walk aggregate median, 
      sway aggregate median,
      brachiation aggregate median,
      climb aggregate median, 
      descent aggregate median, 
      travelDistance aggregate median,
      feedingBudget aggregate median, 
      travellingBudget aggregate median,
      restingBudget aggregate median,
      totalEnergyIntake aggregate median,
      energyExpenditure aggregate median
    )
  )

val resultLine = Val[Array[Double]]

val tupleTask = ScalaTask("""
  val resultLine = 
    Array(walk, sway, brachiation, climb, descent, travelDistance, feedingBudget, travellingBudget, restingBudget, totalEnergyIntake, energyExpenditure) 
""") set (
  (inputs, outputs) += (walk, sway, brachiation, climb, descent, travelDistance, feedingBudget, travellingBudget, restingBudget, totalEnergyIntake, energyExpenditure), 
  outputs += (resultLine)
)

val env =
  SLURMEnvironment(
    "widyastu",
    "taurus.hrsk.tu-dresden.de",
    time = 1 hour,
    memory = 3000 megabytes,
    openMOLEMemory = 2000 megabytes,
    reservation = "p_peatfire_386",
    nodes = 1,
    threads = 1
  )

def profile(variable: Val[Double]) =
ProfileEvolution(
  evaluation = replicate -- tupleTask,
  objective = Seq(resultLine aggregate (aggregatedFitness _) as "budgetFit"),
  reject = "climbSpeed > (descentSpeed - 0.2) || brachiationSpeed > swaySpeed || walkSpeed > swaySpeed", //, "brachiationSpeed < swaySpeed", "walkSpeed < swaySpeed - 0.2" ),
  profile = Seq(variable),
  genome = Seq(
     //bodyWeight in (30.0 to 45.0),
    energyIntake in (0.01 to 10.0),
    energyGain in (0.1 to 500.0),
   // initialSatiation in (-500.0 to 500.0),
    basalEnergy in (0.1 to 15.0),
    brachiationSpeed in (0.1 to 2.0),
    swaySpeed in (0.1 to 2.0),
    climbSpeed in (0.1 to 2.0),
    descentSpeed in (0.1 to 2.0),
    walkSpeed in (0.1 to 1.0),
    month in (1 to 12)
  ),
  parallelism = 700,
  termination = 5000000, //number of evaluated individuals
  stochastic = Stochastic(seed = seed, sample = 50),
  distribution = Island(5 minutes)
) hook (workDirectory / s"results_profile_1611/${variable.name}", filter = Seq(resultLine), frequency = 50) on env by 7




//EmptyTask() -- profile(diffusion)
EmptyTask() -- (profile(energyIntake), profile(energyGain), profile(basalEnergy), profile(brachiationSpeed), profile(swaySpeed), profile(climbSpeed), profile(descentSpeed), profile(walkSpeed))

